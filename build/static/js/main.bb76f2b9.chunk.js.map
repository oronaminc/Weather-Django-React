{"version":3,"sources":["Image/clouds.svg","Image/mist.svg","Image/rain.svg","Image/snow.svg","Image/sun.svg","Components/WeatherIcon.js","Components/DescriptionInfo.js","Components/Home.js","Routes/Router.js","App.js","index.js"],"names":["module","exports","WeatherIcon","weather_name","this","props","name","src","sun","className","alt","haze","clouds","rain","snow","Component","DescriptionInfo","temperature","description","winds","d","Date","getMonth","getHours","axios","require","API_KEY","IP_ADDRESS","arr","Home","getLocation","a","get","data","console","log","state","CURRENT","lat","lon","getWeather","getDust","setInterval","CITY","min","CITY_INDEX","city_name","city_location","j","length","Math","sqrt","pow","setState","city_ko","fetch","then","response","json","floor","main","temp","temperature_max","temp_max","temperature_min","temp_min","weather","icon","wind","speed","res","posts","num","Object","keys","dust","date","currentTime","hours","minutes","getMinutes","getCurrentTime","currentDate","year","getFullYear","month","day","getDate","dayOfTheWeek","getDay","getCurrentDate","id","substring","Router","exact","path","component","App","Layout","styled","div","ReactDOM","render","document","getElementById"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,kSC6B5BC,E,iLAnBP,IAAMC,EAAeC,KAAKC,MAAMC,KAEhC,MAAoB,UAAjBH,EACS,yBAAKI,IAAKC,IAAKC,UAAU,OAAOC,IAAI,QACpB,SAAjBP,EACA,yBAAKI,IAAKI,IAAMF,UAAU,OAAOC,IAAI,SACpB,WAAjBP,EACA,yBAAKI,IAAKK,IAAQH,UAAU,OAAOC,IAAI,WACtB,SAAjBP,EACA,yBAAKI,IAAKM,IAAMJ,UAAU,OAAOC,IAAI,SACpB,SAAjBP,EACA,yBAAKI,IAAKO,IAAML,UAAU,OAAOC,IAAI,SACpB,SAAjBP,EACA,yBAAKI,IAAKI,IAAMF,UAAU,OAAOC,IAAI,SAErC,yBAAKH,IAAKK,IAAQH,UAAU,OAAOC,IAAI,Y,GAjBhCK,aCsDXC,E,iLAzDP,IAAMC,EAAcb,KAAKC,MAAMY,YACzBX,EAAOF,KAAKC,MAAMC,KAClBY,EAAcd,KAAKC,MAAMa,YACzBC,EAAQf,KAAKC,MAAMc,MACnBC,EAAI,IAAIC,KAEd,OAAGJ,GAAe,GACN,gEACFE,GAAS,GACP,gEACe,yBAAhBD,EACA,gEACS,SAATZ,EACA,6EACAc,EAAEE,YAAc,GAAKF,EAAEE,UAAY,EACvCF,EAAEG,YAAc,GAAKH,EAAEG,YAAa,GAC5B,4IACDH,EAAEG,YAAc,IAAMH,EAAEG,YAAc,GACrC,kGAEA,uHAELH,EAAEE,WAAW,IAAM,EACtBF,EAAEG,YAAc,GAAKH,EAAEG,YAAc,GAC7B,6IACDH,EAAEG,YAAc,IAAMH,EAAEG,YAAc,GACpC,6IAED,iIAEJH,EAAEE,WAAW,GAAK,GAAKF,EAAEE,WAAW,GAAI,EAC5CF,EAAEG,YAAc,GAAKH,EAAEG,YAAc,GAC5B,6IACFH,EAAEG,YAAc,IAAMH,EAAEG,YAAc,GACrC,0BAAMd,UAAU,QAAhB,+GAEA,0BAAMA,UAAU,QAAhB,sDAEJW,EAAEE,WAAW,GAAI,GAAKF,EAAEE,WAAW,GAAK,GAC5CF,EAAEG,YAAc,GAAKH,EAAEG,YAAc,GAC7B,0BAAMd,UAAU,QAAhB,mGACDW,EAAEG,YAAc,IAAMH,EAAEG,YAAc,GACrC,0BAAMd,UAAU,QAAhB,oEAEA,0BAAMA,UAAU,QAAhB,oHAGRW,EAAEG,YAAc,GAAKH,EAAEG,YAAc,GAC7B,0BAAMd,UAAU,QAAhB,mIACDW,EAAEG,YAAc,IAAMH,EAAEG,YAAc,GACrC,0BAAMd,UAAU,QAAhB,4JAEA,0BAAMA,UAAU,QAAhB,mH,GAvDOM,aCG1BS,EAAQC,EAAQ,IAEdC,EAAU,mCAEVC,EAAa,kBACbC,EAAM,GAwKGC,M,YAnKX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KAgBVyB,YAjBmB,qBAiBL,8BAAAC,EAAA,qEACaP,EAAMQ,IAAI,0BAA0BL,GADjD,gBACFM,EADE,EACFA,KACRC,QAAQC,IAAIF,GACZ,EAAKG,MAAMC,QAAU,CAACJ,EAAKK,IAAKL,EAAKM,KACrCL,QAAQC,IAAI,EAAKC,MAAMC,SAJb,UAMuB,IAA1B,EAAKD,MAAMC,QAAQ,GANhB,wBAOF,EAAKG,aACL,EAAKC,UARH,oDAYVC,YAAY,WACR,EAAKF,aACL,EAAKC,UACLP,QAAQC,IAAI,gCACb,MAhBO,0CAjBK,EAqCnBK,WAAa,WAOT,IANA,IAEIG,EAFAC,EAAM,MACNC,EAAa,EAEXC,EAAY,CAAC,QAAS,QAAS,QAAS,UAAW,UAAW,QAAS,WAEvEC,EAAgB,CAAC,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAAU,CAAC,OAAQ,SAC1IC,EAAE,EAAGA,EAAEF,EAAUG,OAAQD,IAC7BpB,EAAIoB,GAAKE,KAAKC,KAAKD,KAAKE,IAAIL,EAAcC,GAAG,GAAG,EAAKZ,MAAMC,QAAQ,GAAG,GAAGa,KAAKE,IAAIL,EAAcC,GAAG,GAAG,EAAKZ,MAAMC,QAAQ,GAAG,IACxHT,EAAIoB,GAAKJ,IACTA,EAAMhB,EAAIoB,GACVH,EAAaG,GAGrBd,QAAQC,IAAIP,GACZe,EAAOG,EAAUD,GACjB,EAAKQ,SAAS,CAACC,QAXM,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAWtBT,KACpCX,QAAQC,IAAIQ,GACZT,QAAQC,IAAI,EAAKC,MAAMkB,SAEvBC,MAAM,oDAAD,OAAqDZ,EAArD,kBAAmEjB,IACnE8B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACF,EAAKL,SAAS,CACVpC,YAAaiC,KAAKS,MAAMD,EAAKE,KAAKC,KAAO,QACzCC,gBAAiBZ,KAAKS,MAAMD,EAAKE,KAAKG,SAAW,QACjDC,gBAAiBd,KAAKS,MAAMD,EAAKE,KAAKK,SAAW,QACjD3D,KAAMoD,EAAKQ,QAAQ,GAAGN,KACtBO,KAAMT,EAAKQ,QAAQ,GAAGC,KACtBjD,YAAawC,EAAKQ,QAAQ,GAAGhD,YAC7BC,MAAOuC,EAAKU,KAAKC,WAnEd,EAyEpB5B,QAzEoB,qBAyEV,gCAAAV,EAAA,8EAEawB,MAAM,8BAFnB,cAECe,EAFD,gBAGeA,EAAIZ,OAHnB,OAGCa,EAHD,OAICC,EAAMC,OAAOC,KAAKH,GAAOtB,OAC/Bf,QAAQC,IAAI,SAAUqC,GACtB,EAAKnB,SAAS,CACVsB,KAAOJ,EAAMC,EAAI,GAAV,UAEXtC,QAAQC,IAAIoC,GATP,kDAWLrC,QAAQC,IAAR,MAXK,wDAvEL,EAAKC,MAAQ,CACTnB,YAAa,EACb6C,gBAAiB,EACjBE,gBAAgB,EAChB1D,KAAM,GACN6D,KAAM,GACNjD,YAAa,GACbC,MAAO,GACPkB,QAAQ,CAAC,EAAE,GACXiB,QAAQ,GACRqB,KAAM,MAZK,E,iFAyFfvE,KAAK0B,gB,+BAGC,IAAD,EAC0D1B,KAAKgC,MAA7DnB,EADF,EACEA,YAAY6C,EADd,EACcA,gBAAiBE,EAD/B,EAC+BA,gBAC9BY,GAFD,EACgDT,KACxC,IAAI9C,MACXwD,EA8Cd,SAAwBD,GACpB,IAAIE,EAAQF,EAAKrD,WACbwD,EAAUH,EAAKI,aAMnB,OALaF,GAAS,GAAK,eAAO,gBAIP,KAF3BA,GADAA,GAAgB,KACQ,IAEiB,OADzCC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GApDjBE,CAAeL,GAC7BM,EAwDd,SAAwBN,GACpB,IACMO,EAAOP,EAAKQ,cACdC,EAAS,EAAIT,EAAKtD,WACtB+D,EAAQA,GAAS,GAAKA,EAAQ,IAAMA,EACpC,IAAIC,EAAMV,EAAKW,UACfD,EAAMA,GAAO,GAAKA,EAAM,IAAMA,EAC9B,IAAME,EANO,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAMlBZ,EAAKa,UAAY,eAC3C,OAAON,EAAO,UAAOE,EAAQ,UAAOC,EAAM,SAAME,EAhExBE,CAAed,GAEnC,OACI,yBAAKnE,UAAU,aACX,yBAAKA,UAAU,gBACX,kBAAC,EAAD,CAAaH,KAAMF,KAAKgC,MAAM9B,KAAMqF,GAAG,kBAE3C,yBAAKlF,UAAU,eACVQ,EAAY,yBAAK0E,GAAG,KAAR,QADjB,KAGA,yBAAKlF,UAAU,oBACX,yBAAKA,UAAU,sBACX,0BAAMkF,GAAG,mBAAmB3B,EAAgB,yBAAKvD,UAAU,KAAf,SADhD,KAEI,0BAAMkF,GAAG,mBAAT,IAA6B7B,EAAgB,yBAAKrD,UAAU,KAAf,UAEjD,6BACI,kBAAC,EAAD,CAAiBQ,YAAaA,EACbX,KAAMF,KAAKgC,MAAM9B,KACjBY,YAAad,KAAKgC,MAAMlB,YACxBC,MAAOf,KAAKgC,MAAMjB,UAI3C,yBAAKV,UAAU,QACX,yBAAKkF,GAAG,QACHT,EAAYU,UAAU,EAAE,KAE7B,yBAAKD,GAAG,OACHT,EAAYU,UAAU,GAAG,MAGlC,yBAAKnF,UAAU,QACX,yBAAKkF,GAAG,QACHd,EAAYe,UAAU,EAAE,IAE7B,yBAAKD,GAAG,QACHd,EAAYe,UAAU,U,GAtI5B7E,aCFJ8E,EAPA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnE,M,wJCDnCoE,E,iLAEF,OACE,kBAACC,EAAD,KACE,kBAAC,EAAD,W,GAJUnF,aAUZmF,EAASC,IAAOC,IAAV,KAOGH,I,QCjBfI,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,W","file":"static/js/main.bb76f2b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clouds.3c7ffd3b.svg\";","module.exports = __webpack_public_path__ + \"static/media/mist.676d0d5c.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.c0e8149c.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.517a1f67.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.ec703dd7.svg\";","import React, {Component} from 'react';\r\nimport '../Styles/Home.css';\r\nimport clouds from '../Image/clouds.svg';\r\nimport haze from '../Image/mist.svg';\r\nimport rain from '../Image/rain.svg';\r\nimport snow from '../Image/snow.svg';\r\nimport sun from '../Image/sun.svg';\r\n\r\nclass WeatherIcon extends Component {\r\n    render() {\r\n        const weather_name = this.props.name;\r\n\r\n        if(weather_name === 'Clear') {\r\n            return (<img src={sun} className=\"icon\" alt=\"sun\"/>);\r\n        } else if (weather_name === 'Haze') {\r\n            return(<img src={haze} className=\"icon\" alt=\"haze\"/>);\r\n        } else if (weather_name === 'Clouds') {\r\n            return(<img src={clouds} className=\"icon\" alt=\"clouds\"/>);\r\n        } else if (weather_name === 'Rain') {\r\n            return(<img src={rain} className=\"icon\" alt=\"rain\"/>);\r\n        } else if (weather_name === 'Snow') {\r\n            return(<img src={snow} className=\"icon\" alt=\"snow\"/>);\r\n        } else if (weather_name === 'Mist') {\r\n            return(<img src={haze} className=\"icon\" alt=\"haze\"/>);\r\n        } else {\r\n            return(<img src={clouds} className=\"icon\" alt=\"sun\"/>);\r\n        }\r\n    }\r\n}\r\nexport default WeatherIcon;","import React, {Component} from 'react';\r\n\r\nclass DescriptionInfo extends Component {\r\n    render() {\r\n\r\n        const temperature = this.props.temperature;\r\n        const name = this.props.name;\r\n        const description = this.props.description;\r\n        const winds = this.props.winds;\r\n        const d = new Date();\r\n\r\n        if(temperature >= 33) {\r\n            return (<span>폭염주의보</span>);\r\n        } else if(winds >= 14) {\r\n            return (<span>강풍주의보</span>);\r\n        } else if (description === 'heavy intensity rain') {\r\n            return(<span>호의주의보</span>)\r\n        } else if (name === 'Rain') {\r\n            return(<span>우산을 챙기세요</span>);\r\n        } else if (d.getMonth() >= 3 && d.getMonth <= 5) {\r\n            if(d.getHours() >= 5 && d.getHours() <=12) {\r\n                return(<span>미세먼지 농도를 확인하고 외출해주세요.</span>);\r\n            } else if(d.getHours() >= 13 && d.getHours() <= 18) {\r\n                return(<span>외출하기 좋은 날씨에요:)</span>);\r\n            } else {\r\n                return(<span>외출 후 코와 손을 잘 씻어주세요. </span>);\r\n            }\r\n        } else if(d.getMonth()+1 === 6) {\r\n            if(d.getHours() >= 5 && d.getHours() <= 12) {\r\n                return(<span>외출하기전 선크림 바르기와 양산은 필수!</span>);\r\n            } else if(d.getHours() >= 13 && d.getHours() <= 18) {\r\n                return (<span>날씨가 너무 뜨거우니 외출을 삼가주세요.</span>);\r\n            } else {\r\n                return(<span>바깥 산책을 다녀오시는건 어떨까요? </span>);\r\n            }\r\n        } else if (d.getMonth()+1 >= 7 && d.getMonth()+1 <=8 ) {\r\n            if(d.getHours() >= 5 && d.getHours() <= 12) {\r\n                return (<span>외출하기전 선크림 바르기와 양산은 필수!</span>);\r\n            } else if(d.getHours() >= 13 && d.getHours() <= 18) {\r\n                return(<span className=\"info\">날씨가 너무 뜨거우니 외출을 삼가주세요.</span>);\r\n            } else {\r\n                return(<span className=\"info\">열대야 조심하세요.</span>);\r\n            }\r\n        } else if (d.getMonth()+1 >=9 && d.getMonth()+1 <= 10 ) {\r\n            if(d.getHours() >= 5 && d.getHours() <= 12) {\r\n                return(<span className=\"info\">일교차가 심하니 겉옷을 꼭 챙기세요.</span>);\r\n            } else if(d.getHours() >= 13 && d.getHours() <= 15) {\r\n                return(<span className=\"info\">지금 해가 많이 뜨거워요.</span>);\r\n            } else {\r\n                return(<span className=\"info\">날씨가 많이 쌀쌀해졌으니 감기조심하세요.</span>);\r\n            }\r\n        } else {\r\n            if(d.getHours() >= 5 && d.getHours() <= 12) {\r\n                return(<span className=\"info\">날씨가 많이 추우니 옷을 단단히 입고 외출하세요.</span>);\r\n            } else if(d.getHours() >= 13 && d.getHours() <= 17) {\r\n                return(<span className=\"info\">저녁에 날씨가 많이 추우니 꼭 장갑과 털모자를 챙겨주세요.</span>);\r\n            } else {\r\n                return(<span className=\"info\">날씨가 많이 추우니 외출은 삼가해주세요.</span>);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default DescriptionInfo;","import React, {Component} from 'react';\r\nimport WeatherIcon from '../Components/WeatherIcon.js';\r\nimport DescriptionInfo from '../Components/DescriptionInfo.js';\r\nimport '../Styles/Home.css';\r\n\r\nlet axios = require(\"axios\");\r\n\r\nconst API_KEY = 'e54d20ac6a105a3f3562b4aebdd92317';\r\n// const SERVICE_KEY = 'N7EI8IngoBbxqqD2P6TC7G9voIeY6dwtKSYUunV%2BVzriu4d9Ttc0I6yGNprKytAmnLwf04vL8jBVMVKfHC%2BYhg%3D%3D';\r\nconst IP_ADDRESS = '125.177.148.186';\r\nconst arr = [];\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            temperature: 0,\r\n            temperature_max :0,\r\n            temperature_min:0,\r\n            name: '',\r\n            icon: '',\r\n            description: '',\r\n            winds: '',\r\n            CURRENT:[1,1],\r\n            city_ko:'',\r\n            dust: 'oo',\r\n        }\r\n    }\r\n\r\n\r\n    getLocation = async () => {\r\n        const { data } = await axios.get(\"http://ip-api.com/json/\"+IP_ADDRESS);\r\n        console.log(data);\r\n        this.state.CURRENT = [data.lat, data.lon];\r\n        console.log(this.state.CURRENT);\r\n        while(true){\r\n            if(this.state.CURRENT[0] !== 0){\r\n                this.getWeather();\r\n                this.getDust();\r\n                break;\r\n            }\r\n        }\r\n        setInterval(() => {\r\n            this.getWeather();\r\n            this.getDust();\r\n            console.log('30 minute cycle setInterval');\r\n        }, 1800000);\r\n      \r\n    }\r\n\r\n    getWeather = () => {\r\n        let min = 99999;\r\n        let CITY_INDEX = 0;\r\n        let CITY = '';\r\n        const city_name = ['Seoul', 'Daegu', 'Busan', 'Daejeon', 'Gwangju', 'Wonju', 'Taebaek'];\r\n        const city_name_ko = ['서울', '대구', '부산', '대전', '광주', '원주', '태백'];\r\n        const city_location = [[37.556, 126.967], [35.841, 128.574], [35.161, 129.049], [36.338, 127.413], [35.153, 126.819], [37.306, 127.929], [37.172, 128.980]];\r\n        for(let j=0; j<city_name.length; j++){\r\n            arr[j] = Math.sqrt(Math.pow(city_location[j][0]-this.state.CURRENT[0],2)+Math.pow(city_location[j][1]-this.state.CURRENT[1],2))\r\n            if (arr[j] < min){\r\n                min = arr[j];\r\n                CITY_INDEX = j;\r\n            }\r\n        }\r\n        console.log(arr);\r\n        CITY = city_name[CITY_INDEX];\r\n        this.setState({city_ko:city_name_ko[CITY_INDEX]});\r\n        console.log(CITY);\r\n        console.log(this.state.city_ko);\r\n\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${CITY}&APPID=${API_KEY}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    temperature: Math.floor(json.main.temp - 273.15),\r\n                    temperature_max: Math.floor(json.main.temp_max - 273.15),\r\n                    temperature_min: Math.floor(json.main.temp_min - 273.15),\r\n                    name: json.weather[0].main,\r\n                    icon: json.weather[0].icon,\r\n                    description: json.weather[0].description,\r\n                    winds: json.wind.speed,\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n   getDust = async () => {\r\n    try {\r\n        const res = await fetch('http://127.0.0.1:8000/api/');\r\n        const posts = await res.json();\r\n        const num = Object.keys(posts).length\r\n        console.log('num : ', num)\r\n        this.setState({\r\n            dust : posts[num-1]['content']\r\n        });\r\n        console.log(posts);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLocation();\r\n    }\r\n\r\n    render() {\r\n        const {temperature,temperature_max, temperature_min, icon, } = this.state;\r\n        const date = new Date();\r\n        const currentTime = getCurrentTime(date);\r\n        const currentDate = getCurrentDate(date);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"weather_icon\">\r\n                    <WeatherIcon name={this.state.name} id=\"weather_icon\" ></WeatherIcon>\r\n                </div>\r\n                <div className=\"temperature\">\r\n                    {temperature}<sup id=\"c\">º</sup>C\r\n                </div>\r\n                <div className=\"temperature_info\">\r\n                    <div className=\"temperature_minmax\">\r\n                        <span id=\"temperature_min\">{temperature_min}<sup className=\"c\">º</sup></span> /\r\n                        <span id=\"temperature_max\"> {temperature_max}<sup className=\"c\">º</sup></span>\r\n                    </div>\r\n                    <div>\r\n                        <DescriptionInfo temperature={temperature}\r\n                                         name={this.state.name}\r\n                                         description={this.state.description}\r\n                                         winds={this.state.winds}\r\n                        ></DescriptionInfo>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">\r\n                    <div id=\"year\">\r\n                        {currentDate.substring(0,13)}\r\n                    </div>\r\n                    <div id=\"mon\">\r\n                        {currentDate.substring(13,16)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"time\">\r\n                    <div id=\"ampm\">\r\n                        {currentTime.substring(0,2)}\r\n                    </div>\r\n                    <div id=\"time\">\r\n                        {currentTime.substring(3)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nfunction getCurrentTime(date) {\r\n    let hours = date.getHours();\r\n    let minutes = date.getMinutes();\r\n    const ampm = hours >= 12 ? '오후' : '오전';\r\n    hours = hours % 12;\r\n    hours = hours ? hours : 12;\r\n    minutes = minutes < 10 ? '0' + minutes : minutes;\r\n    const currentTime = ampm + ' ' + hours + ' : ' + minutes;\r\n    return currentTime;\r\n}\r\n\r\nfunction getCurrentDate(date) {\r\n    const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n    const year = date.getFullYear();\r\n    let month = (1 + date.getMonth());\r\n    month = month >= 10 ? month : '0' + month;\r\n    let day = date.getDate();\r\n    day = day >= 10 ? day : '0' + day;\r\n    const dayOfTheWeek = week[date.getDay()] + '요일';\r\n    return year + '년 ' + month + '월 ' + day + '일' + dayOfTheWeek;\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Home } from './index';\r\n\r\nconst Router = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n    </Switch>\r\n);\r\n\r\n\r\nexport default Router;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Router from './Routes/Router';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Router />\n      </Layout>\n    );\n  }\n}\n\nconst Layout = styled.div`\n  margin: 0 auto;\n  display: flex;\n  width: 100%;\n  flex-flow: row wrap;\n`\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n"],"sourceRoot":""}